name: Deploy to PythonAnywhere

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests paramiko
        
    - name: Deploy to PythonAnywhere
      env:
        PA_API_TOKEN: ${{ secrets['1592c2d6f5cb8826fe0424e48b744c65102f27ed'] }}
        PA_USERNAME: ${{ secrets['beyoundhunger12'] }}
        PA_SSH_PASSWORD: ${{ secrets['beyoundhunger12'] }}
      run: |
        # Create a deployment script that will update the code and reload the webapp
        cat > deploy_script.py << 'EOF'
        import os
        import requests
        import sys
        import time
        import paramiko

        username = os.environ.get('PA_USERNAME')
        token = os.environ.get('PA_API_TOKEN')
        password = os.environ.get('PA_SSH_PASSWORD')

        if not username or not token:
            print('Error: Environment variables PA_USERNAME and PA_API_TOKEN must be set')
            sys.exit(1)

        # First, pull the latest code using SSH if password is available
        if password:
            try:
                print(f'Connecting to {username}.pythonanywhere.com via SSH...')
                client = paramiko.SSHClient()
                client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                client.connect(
                    hostname=f'{username}.pythonanywhere.com',
                    username=username,
                    password=password
                )
                
                # Execute git pull to update the code
                print('Pulling latest code from repository...')
                stdin, stdout, stderr = client.exec_command('cd ~/beyoundhunger && git pull')
                print('stdout:', stdout.read().decode())
                print('stderr:', stderr.read().decode())
                
                # Run migrations if needed
                print('Running migrations...')
                stdin, stdout, stderr = client.exec_command('cd ~/beyoundhunger && python manage.py migrate')
                print('stdout:', stdout.read().decode())
                print('stderr:', stderr.read().decode())
                
                # Collect static files
                print('Collecting static files...')
                stdin, stdout, stderr = client.exec_command('cd ~/beyoundhunger && python manage.py collectstatic --noinput')
                print('stdout:', stdout.read().decode())
                print('stderr:', stderr.read().decode())
                
                client.close()
                print('SSH operations completed.')
            except Exception as e:
                print(f'Error during SSH operations: {str(e)}')
                print('Continuing with webapp reload...')

        # Check if webapp exists
        print(f'Checking for webapp {username}.pythonanywhere.com...')
        check_url = f'https://www.pythonanywhere.com/api/v0/user/{username}/webapps/'
        check_response = requests.get(
            check_url,
            headers={'Authorization': f'Token {token}'}
        )
        
        if check_response.status_code != 200:
            print(f'Error checking webapps: {check_response.status_code}')
            print(f'Response: {check_response.text}')
            sys.exit(1)
            
        webapps = check_response.json()
        webapp_exists = False
        for webapp in webapps:
            if webapp.get('domain_name') == f'{username}.pythonanywhere.com':
                webapp_exists = True
                break
                
        if not webapp_exists:
            print(f'Error: Webapp {username}.pythonanywhere.com does not exist on PythonAnywhere')
            print('Please create the webapp first following the deployment guide')
            sys.exit(1)

        # Now proceed with reload
        print('Reloading PythonAnywhere Web App...')
        reload_url = f'https://www.pythonanywhere.com/api/v0/user/{username}/webapps/{username}.pythonanywhere.com/reload/'
        print(f'POST request to: {reload_url}')
        
        # Add retry logic
        max_attempts = 3
        for attempt in range(1, max_attempts + 1):
            try:
                response = requests.post(
                    reload_url,
                    headers={'Authorization': f'Token {token}'}
                )
                
                if response.status_code == 200:
                    print('Deployment successful!')
                    sys.exit(0)
                else:
                    print(f'Deployment attempt {attempt} failed: {response.status_code}')
                    print(f'Response text: {response.text}')
                    
                    if attempt < max_attempts:
                        print(f'Retrying in {attempt * 2} seconds...')
                        time.sleep(attempt * 2)
                    else:
                        print('All retry attempts failed')
                        sys.exit(1)
            except Exception as e:
                print(f'Exception during deployment attempt {attempt}: {str(e)}')
                if attempt < max_attempts:
                    print(f'Retrying in {attempt * 2} seconds...')
                    time.sleep(attempt * 2)
                else:
                    print('All retry attempts failed')
                    sys.exit(1)
        EOF
        
        python deploy_script.py 