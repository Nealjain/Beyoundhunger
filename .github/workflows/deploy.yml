name: Deploy to PythonAnywhere

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests paramiko
        
    - name: Deploy to PythonAnywhere
      env:
        PA_API_TOKEN: ${{ secrets.PA_API_TOKEN }}
        PA_USERNAME: ${{ secrets.PA_USERNAME }}
        PA_SSH_PASSWORD: ${{ secrets.PA_SSH_PASSWORD }}
      run: |
        # If SSH password is available, sync the code to PythonAnywhere first
        if [ ! -z "$PA_SSH_PASSWORD" ]; then
          echo "Setting up SSH connection to PythonAnywhere..."
          
          # Create Python script for code sync
          cat > sync_code.py << 'EOF'
          import os
          import paramiko
          import sys

          username = os.environ.get('PA_USERNAME')
          password = os.environ.get('PA_SSH_PASSWORD')

          if not username or not password:
              print('Error: SSH credentials not available')
              sys.exit(0)  # Continue with deployment even if SSH fails

          try:
              print(f'Connecting to {username}.pythonanywhere.com via SSH...')
              client = paramiko.SSHClient()
              client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
              client.connect(
                  hostname=f'{username}.pythonanywhere.com',
                  username=username,
                  password=password,
                  timeout=30
              )
              
              # Execute git pull to update the code
              print('Pulling latest code from repository...')
              stdin, stdout, stderr = client.exec_command('cd ~/beyoundhunger && git pull')
              print('stdout:', stdout.read().decode())
              print('stderr:', stderr.read().decode())
              
              # Run migrations if needed
              print('Running migrations...')
              stdin, stdout, stderr = client.exec_command('cd ~/beyoundhunger && python manage.py migrate')
              print('stdout:', stdout.read().decode())
              print('stderr:', stderr.read().decode())
              
              # Collect static files
              print('Collecting static files...')
              stdin, stdout, stderr = client.exec_command('cd ~/beyoundhunger && python manage.py collectstatic --noinput')
              print('stdout:', stdout.read().decode())
              print('stderr:', stderr.read().decode())
              
              client.close()
              print('SSH operations completed successfully')
          except Exception as e:
              print(f'Error during SSH operations: {str(e)}')
              print('Continuing with webapp reload...')
          EOF

          # Run the code sync script
          python sync_code.py
        else
          echo "SSH password not available, skipping code sync via SSH."
        fi
        
        # Use the deploy_script.py from the repository to reload the webapp
        echo "Running deploy script to reload PythonAnywhere web app..."
        python deploy_script.py 